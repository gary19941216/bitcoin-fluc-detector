[2020-06-14 03:02:38,821] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-06-14 03:02:38,822] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-06-14 03:02:38,822] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-06-14 03:02:38,822] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:02:38,822] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-06-14 03:02:38,822] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:07:38,822] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-06-14 03:07:38,823] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-06-14 03:07:38,823] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-06-14 03:07:38,823] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:07:38,823] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-06-14 03:07:38,823] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:12:38,824] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-06-14 03:12:38,824] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-06-14 03:12:38,825] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-06-14 03:12:38,825] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:12:38,825] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-06-14 03:12:38,825] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:17:38,825] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-06-14 03:17:38,826] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-06-14 03:17:38,826] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-06-14 03:17:38,826] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:17:38,826] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-06-14 03:17:38,826] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:22:38,826] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-06-14 03:22:38,827] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-06-14 03:22:38,827] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-06-14 03:22:38,827] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:22:38,827] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-06-14 03:22:38,827] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-06-14 03:25:45,709] INFO [Controller id=1] Newly added brokers: 3, deleted brokers: , bounced brokers: , all live brokers: 1,2,3 (kafka.controller.KafkaController)
[2020-06-14 03:25:45,710] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 3 (kafka.controller.ControllerChannelManager)
[2020-06-14 03:25:45,723] INFO [Controller id=1] New broker startup callback for 3 (kafka.controller.KafkaController)
[2020-06-14 03:25:45,729] INFO [RequestSendThread controllerId=1] Controller 1 connected to 10.0.0.13:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-06-14 03:25:45,735] INFO [RequestSendThread controllerId=1] Controller 1 connected to 10.0.0.7:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-06-14 03:25:45,740] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-06-14 03:25:45,759] DEBUG [Controller id=1] Register BrokerModifications handler for Vector(3) (kafka.controller.KafkaController)
[2020-06-14 03:25:45,760] INFO [Controller id=1] Updated broker epochs cache: Map(1 -> 307, 2 -> 326, 3 -> 430) (kafka.controller.KafkaController)
[2020-06-14 03:25:45,761] INFO [RequestSendThread controllerId=1] Controller 1 connected to 10.0.0.10:9092 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-06-14 03:26:21,423] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-06-14 03:26:42,404] INFO [Controller id=1] Shutting down broker 1 (kafka.controller.KafkaController)
[2020-06-14 03:26:42,404] DEBUG [Controller id=1] All shutting down brokers: 1 (kafka.controller.KafkaController)
[2020-06-14 03:26:42,405] DEBUG [Controller id=1] Live brokers: 2,3 (kafka.controller.KafkaController)
[2020-06-14 03:26:42,534] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=22,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=30,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=8,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=4,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=46,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=16,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=28,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=36,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=42,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=18,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=24,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=38,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=48,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=6,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=14,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=20,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=44,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=12,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=26,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=34,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=10,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=32,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=40,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-06-14 03:26:42,608] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=42,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=40,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=20,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=14,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=8,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=22,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=30,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=10,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=26,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=44,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=18,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=46,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=4,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=38,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=34,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=48,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=12,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=28,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=6,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=24,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=16,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=32,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=36,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-06-14 03:26:42,615] TRACE [Controller id=1] All leaders = __consumer_offsets-49 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-38 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),test2-2 -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:5),__consumer_offsets-16 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),streams-wordcount-output-0 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:3),__consumer_offsets-8 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-19 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-13 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-2 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-46 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-35 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-24 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-5 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-43 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-32 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-10 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-37 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),test2-1 -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:5),__consumer_offsets-48 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-40 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-29 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-18 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),streams-plaintext-input-0 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-7 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-34 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-23 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-26 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-4 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-42 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-31 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-20 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),test-0 -> (Leader:1,ISR:1,LeaderEpoch:3,ControllerEpoch:3),streams-wordcount-counts-store-repartition-0 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:5),__consumer_offsets-12 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-1 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-28 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-17 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-6 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-44 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),test2-0 -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:5),__consumer_offsets-36 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-47 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-25 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-14 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-30 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-41 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),streams-wordcount-counts-store-changelog-0 -> (Leader:1,ISR:1,LeaderEpoch:0,ControllerEpoch:5),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-22 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),__consumer_offsets-11 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5),__consumer_offsets-0 -> (Leader:2,ISR:2,LeaderEpoch:3,ControllerEpoch:5),data-0 -> (Leader:2,ISR:2,LeaderEpoch:2,ControllerEpoch:5) (kafka.controller.KafkaController)
[2020-06-14 03:26:48,587] INFO [ControllerEventThread controllerId=1] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:26:48,591] INFO [ControllerEventThread controllerId=1] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:26:48,592] INFO [ControllerEventThread controllerId=1] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:26:48,593] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2020-06-14 03:26:48,594] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set(2, 1, 3) (kafka.controller.KafkaController)
[2020-06-14 03:26:48,597] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:26:48,609] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:26:48,610] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,610] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,611] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,623] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,625] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,625] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,627] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,627] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,628] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2020-06-14 03:26:48,632] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2020-06-14 03:37:17,937] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-06-14 03:39:08,447] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:39:08,502] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 8 and epoch zk version is now 8 (kafka.controller.KafkaController)
[2020-06-14 03:39:08,502] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2020-06-14 03:39:08,519] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-06-14 03:39:08,523] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-06-14 03:39:08,526] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2020-06-14 03:39:08,559] INFO [Controller id=1] Initialized broker epochs cache: Map(1 -> 515) (kafka.controller.KafkaController)
[2020-06-14 03:39:08,599] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2020-06-14 03:39:08,685] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-06-14 03:39:08,743] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2020-06-14 03:39:08,744] INFO [Controller id=1] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-06-14 03:39:08,744] INFO [Controller id=1] Current list of topics in the cluster: Set(test, streams-wordcount-counts-store-changelog, data, streams-plaintext-input, __consumer_offsets, streams-wordcount-output, streams-wordcount-counts-store-repartition, test2) (kafka.controller.KafkaController)
[2020-06-14 03:39:08,745] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-06-14 03:39:08,754] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-06-14 03:39:08,770] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-06-14 03:39:08,770] INFO [Controller id=1] List of topics ineligible for deletion: data,streams-plaintext-input,__consumer_offsets,test2 (kafka.controller.KafkaController)
[2020-06-14 03:39:08,771] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-06-14 03:39:08,771] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set(data, streams-plaintext-input, __consumer_offsets, test2) (kafka.controller.TopicDeletionManager)
[2020-06-14 03:39:08,772] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2020-06-14 03:39:08,801] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:39:08,825] INFO [RequestSendThread controllerId=1] Controller 1 connected to 10.0.0.7:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-06-14 03:39:08,841] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:39:09,064] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:39:09,306] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> Map([Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=2] -> OfflineReplica, [Topic=test2,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=data,Partition=0,Replica=2] -> OfflineReplica, [Topic=test2,Partition=1,Replica=2] -> OfflineReplica, [Topic=test2,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=streams-wordcount-output,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=1] -> OnlineReplica, [Topic=test2,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=test2,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=1] -> OnlineReplica, [Topic=streams-plaintext-input,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=40,Replica=1] -> OnlineReplica, [Topic=streams-wordcount-counts-store-repartition,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=1] -> OnlineReplica, [Topic=test,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=streams-wordcount-counts-store-changelog,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=1] -> OnlineReplica, [Topic=test2,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=40,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=2] -> OfflineReplica, [Topic=data,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:39:09,307] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:39:09,342] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:39:09,554] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> Map(__consumer_offsets-49 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, test2-2 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-27 -> OfflinePartition, streams-wordcount-output-0 -> OnlinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-19 -> OfflinePartition, __consumer_offsets-13 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-24 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, __consumer_offsets-37 -> OfflinePartition, test2-1 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-18 -> OfflinePartition, streams-plaintext-input-0 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-20 -> OfflinePartition, test-0 -> OnlinePartition, streams-wordcount-counts-store-repartition-0 -> OnlinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, test2-0 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-41 -> OfflinePartition, streams-wordcount-counts-store-changelog-0 -> OnlinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-22 -> OfflinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-0 -> OfflinePartition, data-0 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:39:09,555] INFO [Controller id=1] Ready to serve as the new controller with epoch 8 (kafka.controller.KafkaController)
[2020-06-14 03:39:09,572] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-06-14 03:39:09,573] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-06-14 03:39:09,573] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-06-14 03:39:09,574] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-06-14 03:39:09,576] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-06-14 03:39:09,594] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-06-14 03:39:14,595] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-06-14 03:39:14,596] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-06-14 03:39:14,604] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map(streams-plaintext-input-0 -> Vector(2), __consumer_offsets-22 -> Vector(2, 1), __consumer_offsets-30 -> Vector(2, 1), __consumer_offsets-8 -> Vector(2, 1), __consumer_offsets-4 -> Vector(2, 1), __consumer_offsets-46 -> Vector(2, 1), __consumer_offsets-16 -> Vector(2, 1), __consumer_offsets-28 -> Vector(2, 1), __consumer_offsets-36 -> Vector(2, 1), __consumer_offsets-42 -> Vector(2, 1), __consumer_offsets-18 -> Vector(2, 1), __consumer_offsets-24 -> Vector(2, 1), __consumer_offsets-38 -> Vector(2, 1), test2-2 -> Vector(2, 1), __consumer_offsets-48 -> Vector(2, 1), __consumer_offsets-2 -> Vector(2, 1), __consumer_offsets-6 -> Vector(2, 1), __consumer_offsets-14 -> Vector(2, 1), __consumer_offsets-20 -> Vector(2, 1), __consumer_offsets-0 -> Vector(2, 1), __consumer_offsets-44 -> Vector(2, 1), __consumer_offsets-12 -> Vector(2, 1), __consumer_offsets-26 -> Vector(2, 1), __consumer_offsets-34 -> Vector(2, 1), __consumer_offsets-10 -> Vector(2, 1), test2-0 -> Vector(2, 1), __consumer_offsets-32 -> Vector(2, 1), __consumer_offsets-40 -> Vector(2, 1)) (kafka.controller.KafkaController)
[2020-06-14 03:39:14,605] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 1.0 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,606] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2020-06-14 03:39:14,607] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map(__consumer_offsets-21 -> Vector(1, 2), __consumer_offsets-27 -> Vector(1, 2), __consumer_offsets-7 -> Vector(1, 2), __consumer_offsets-9 -> Vector(1, 2), __consumer_offsets-25 -> Vector(1, 2), __consumer_offsets-35 -> Vector(1, 2), __consumer_offsets-41 -> Vector(1, 2), __consumer_offsets-33 -> Vector(1, 2), __consumer_offsets-23 -> Vector(1, 2), __consumer_offsets-49 -> Vector(1, 2), test2-1 -> Vector(1, 2), __consumer_offsets-47 -> Vector(1, 2), __consumer_offsets-31 -> Vector(1, 2), __consumer_offsets-3 -> Vector(1, 2), __consumer_offsets-37 -> Vector(1, 2), __consumer_offsets-15 -> Vector(1, 2), __consumer_offsets-17 -> Vector(1, 2), __consumer_offsets-19 -> Vector(1, 2), __consumer_offsets-11 -> Vector(1, 2), __consumer_offsets-13 -> Vector(1, 2), __consumer_offsets-43 -> Vector(1, 2), __consumer_offsets-39 -> Vector(1, 2), data-0 -> Vector(1, 2), __consumer_offsets-45 -> Vector(1, 2), __consumer_offsets-1 -> Vector(1, 2), __consumer_offsets-5 -> Vector(1, 2), __consumer_offsets-29 -> Vector(1, 2)) (kafka.controller.KafkaController)
[2020-06-14 03:39:14,607] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.8709677419354839 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,607] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions __consumer_offsets-21,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,test2-1,__consumer_offsets-47,__consumer_offsets-31,__consumer_offsets-3,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-17,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-43,__consumer_offsets-39,data-0,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-29 triggered by AutoTriggered (kafka.controller.KafkaController)
[2020-06-14 03:39:14,652] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-21 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-21 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,653] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-27 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-27 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,653] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-7 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-7 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,653] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-9 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-9 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,653] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-25 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-25 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,653] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-35 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-35 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,653] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-41 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-41 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,654] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-33 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-33 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,654] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-23 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-23 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,654] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-49 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-49 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,654] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition test2-1 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition test2-1 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,654] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-47 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-47 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,654] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-31 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-31 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,655] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-3 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-3 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,655] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-37 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-37 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,655] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-15 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-15 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,655] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-17 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-17 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,655] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-19 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-19 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,655] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-11 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-11 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,656] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-13 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-13 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,656] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-43 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-43 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,656] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-39 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-39 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,656] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition data-0 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition data-0 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,656] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-45 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-45 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,656] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-1 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-1 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,656] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-5 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-5 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,657] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-29 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-29 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:39:14,658] WARN [Controller id=1] Partition __consumer_offsets-21 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,658] WARN [Controller id=1] Partition __consumer_offsets-27 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,658] WARN [Controller id=1] Partition __consumer_offsets-7 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,658] WARN [Controller id=1] Partition __consumer_offsets-9 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,658] WARN [Controller id=1] Partition __consumer_offsets-25 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,658] WARN [Controller id=1] Partition __consumer_offsets-35 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,658] WARN [Controller id=1] Partition __consumer_offsets-41 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-33 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-23 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-49 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition test2-1 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-47 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-31 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-3 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-37 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-15 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-17 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-19 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-11 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-13 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-43 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-39 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition data-0 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-45 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-1 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-5 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:39:14,660] WARN [Controller id=1] Partition __consumer_offsets-29 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:05,826] INFO [Controller id=1] Shutting down broker 1 (kafka.controller.KafkaController)
[2020-06-14 03:43:05,827] DEBUG [Controller id=1] All shutting down brokers: 1 (kafka.controller.KafkaController)
[2020-06-14 03:43:05,827] DEBUG [Controller id=1] Live brokers:  (kafka.controller.KafkaController)
[2020-06-14 03:43:05,836] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=22,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=30,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=8,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=21,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=4,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=27,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=7,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=9,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=46,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=25,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=35,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=41,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=33,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=23,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=49,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=1,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=47,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=16,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=28,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=31,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=36,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=42,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=3,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=18,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=37,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=15,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=24,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=38,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=17,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=48,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=19,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=11,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=13,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=43,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=6,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=14,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=20,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=44,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=39,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=12,Replica=1],false),StopReplicaRequestInfo([Topic=data,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=45,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=1,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=5,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=26,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=29,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=34,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=10,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=32,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=40,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-06-14 03:43:05,894] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=42,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=40,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=23,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=20,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=9,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=15,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=14,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=1,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=8,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=22,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=30,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=10,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=7,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=29,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=26,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=44,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=18,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=39,Replica=1],false),StopReplicaRequestInfo([Topic=data,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=46,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=27,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=31,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=49,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=4,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=38,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=34,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=11,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=13,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=17,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=1,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=25,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=43,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=19,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=48,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=35,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=12,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=28,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=6,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=37,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=5,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=24,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=47,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=16,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=32,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=33,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=3,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=21,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=45,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=41,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=36,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-06-14 03:43:05,901] TRACE [Controller id=1] All leaders = __consumer_offsets-49 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-38 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),test2-2 -> (Leader:-1,ISR:2,LeaderEpoch:2,ControllerEpoch:8),__consumer_offsets-16 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-27 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),streams-wordcount-output-0 -> (Leader:1,ISR:1,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-8 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-19 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-13 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-2 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-46 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-35 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-24 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-5 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-43 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-32 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-21 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-10 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-37 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),test2-1 -> (Leader:-1,ISR:2,LeaderEpoch:2,ControllerEpoch:8),__consumer_offsets-48 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-40 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-29 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-18 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),streams-plaintext-input-0 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-7 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-34 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-45 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-23 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-26 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-4 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-15 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-42 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-31 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-9 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-20 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),test-0 -> (Leader:1,ISR:1,LeaderEpoch:6,ControllerEpoch:8),streams-wordcount-counts-store-repartition-0 -> (Leader:1,ISR:1,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-1 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-12 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-28 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-17 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-6 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-39 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-44 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),test2-0 -> (Leader:-1,ISR:2,LeaderEpoch:2,ControllerEpoch:8),__consumer_offsets-36 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-47 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-3 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-25 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-14 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-30 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-41 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),streams-wordcount-counts-store-changelog-0 -> (Leader:1,ISR:1,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-33 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-22 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),__consumer_offsets-11 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-0 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:8),data-0 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:8) (kafka.controller.KafkaController)
[2020-06-14 03:43:07,185] INFO [ControllerEventThread controllerId=1] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:43:07,186] INFO [ControllerEventThread controllerId=1] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:43:07,186] INFO [ControllerEventThread controllerId=1] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:43:07,187] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2020-06-14 03:43:07,188] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2020-06-14 03:43:07,190] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:43:07,191] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:43:07,191] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2020-06-14 03:43:07,191] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2020-06-14 03:43:07,191] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2020-06-14 03:43:07,194] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2020-06-14 03:43:31,951] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:43:31,986] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 9 and epoch zk version is now 9 (kafka.controller.KafkaController)
[2020-06-14 03:43:31,986] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2020-06-14 03:43:31,992] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-06-14 03:43:32,000] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-06-14 03:43:32,009] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2020-06-14 03:43:32,044] INFO [Controller id=1] Initialized broker epochs cache: Map(1 -> 623) (kafka.controller.KafkaController)
[2020-06-14 03:43:32,070] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2020-06-14 03:43:32,159] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-06-14 03:43:32,180] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-06-14 03:43:32,181] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2020-06-14 03:43:32,181] INFO [Controller id=1] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-06-14 03:43:32,182] INFO [Controller id=1] Current list of topics in the cluster: Set(test, streams-wordcount-counts-store-changelog, data, streams-plaintext-input, __consumer_offsets, streams-wordcount-output, streams-wordcount-counts-store-repartition, test2) (kafka.controller.KafkaController)
[2020-06-14 03:43:32,182] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-06-14 03:43:32,205] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-06-14 03:43:32,205] INFO [Controller id=1] List of topics ineligible for deletion: data,streams-plaintext-input,__consumer_offsets,test2 (kafka.controller.KafkaController)
[2020-06-14 03:43:32,206] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-06-14 03:43:32,206] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set(data, streams-plaintext-input, __consumer_offsets, test2) (kafka.controller.TopicDeletionManager)
[2020-06-14 03:43:32,220] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2020-06-14 03:43:32,251] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:43:32,257] INFO [RequestSendThread controllerId=1] Controller 1 connected to 10.0.0.7:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-06-14 03:43:32,281] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:43:32,510] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:43:32,769] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> Map([Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=2] -> OfflineReplica, [Topic=test2,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=data,Partition=0,Replica=2] -> OfflineReplica, [Topic=test2,Partition=1,Replica=2] -> OfflineReplica, [Topic=test2,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=streams-wordcount-output,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=1] -> OnlineReplica, [Topic=test2,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=test2,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=1] -> OnlineReplica, [Topic=streams-plaintext-input,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=40,Replica=1] -> OnlineReplica, [Topic=streams-wordcount-counts-store-repartition,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=1] -> OnlineReplica, [Topic=test,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=streams-wordcount-counts-store-changelog,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=1] -> OnlineReplica, [Topic=test2,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=40,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=2] -> OfflineReplica, [Topic=data,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:43:32,770] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:43:32,775] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:43:32,923] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> Map(__consumer_offsets-49 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, test2-2 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-27 -> OfflinePartition, streams-wordcount-output-0 -> OnlinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-19 -> OfflinePartition, __consumer_offsets-13 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-24 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, __consumer_offsets-37 -> OfflinePartition, test2-1 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-18 -> OfflinePartition, streams-plaintext-input-0 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-20 -> OfflinePartition, test-0 -> OnlinePartition, streams-wordcount-counts-store-repartition-0 -> OnlinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, test2-0 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-41 -> OfflinePartition, streams-wordcount-counts-store-changelog-0 -> OnlinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-22 -> OfflinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-0 -> OfflinePartition, data-0 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:43:32,924] INFO [Controller id=1] Ready to serve as the new controller with epoch 9 (kafka.controller.KafkaController)
[2020-06-14 03:43:32,941] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-06-14 03:43:32,942] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-06-14 03:43:32,942] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-06-14 03:43:32,943] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-06-14 03:43:32,946] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-06-14 03:43:32,965] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-06-14 03:43:37,967] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-06-14 03:43:37,967] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-06-14 03:43:37,983] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map(streams-plaintext-input-0 -> Vector(2), __consumer_offsets-22 -> Vector(2, 1), __consumer_offsets-30 -> Vector(2, 1), __consumer_offsets-8 -> Vector(2, 1), __consumer_offsets-4 -> Vector(2, 1), __consumer_offsets-46 -> Vector(2, 1), __consumer_offsets-16 -> Vector(2, 1), __consumer_offsets-28 -> Vector(2, 1), __consumer_offsets-36 -> Vector(2, 1), __consumer_offsets-42 -> Vector(2, 1), __consumer_offsets-18 -> Vector(2, 1), __consumer_offsets-24 -> Vector(2, 1), __consumer_offsets-38 -> Vector(2, 1), test2-2 -> Vector(2, 1), __consumer_offsets-48 -> Vector(2, 1), __consumer_offsets-2 -> Vector(2, 1), __consumer_offsets-6 -> Vector(2, 1), __consumer_offsets-14 -> Vector(2, 1), __consumer_offsets-20 -> Vector(2, 1), __consumer_offsets-0 -> Vector(2, 1), __consumer_offsets-44 -> Vector(2, 1), __consumer_offsets-12 -> Vector(2, 1), __consumer_offsets-26 -> Vector(2, 1), __consumer_offsets-34 -> Vector(2, 1), __consumer_offsets-10 -> Vector(2, 1), test2-0 -> Vector(2, 1), __consumer_offsets-32 -> Vector(2, 1), __consumer_offsets-40 -> Vector(2, 1)) (kafka.controller.KafkaController)
[2020-06-14 03:43:37,985] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 1.0 (kafka.controller.KafkaController)
[2020-06-14 03:43:37,985] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2020-06-14 03:43:37,986] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map(__consumer_offsets-21 -> Vector(1, 2), __consumer_offsets-27 -> Vector(1, 2), __consumer_offsets-7 -> Vector(1, 2), __consumer_offsets-9 -> Vector(1, 2), __consumer_offsets-25 -> Vector(1, 2), __consumer_offsets-35 -> Vector(1, 2), __consumer_offsets-41 -> Vector(1, 2), __consumer_offsets-33 -> Vector(1, 2), __consumer_offsets-23 -> Vector(1, 2), __consumer_offsets-49 -> Vector(1, 2), test2-1 -> Vector(1, 2), __consumer_offsets-47 -> Vector(1, 2), __consumer_offsets-31 -> Vector(1, 2), __consumer_offsets-3 -> Vector(1, 2), __consumer_offsets-37 -> Vector(1, 2), __consumer_offsets-15 -> Vector(1, 2), __consumer_offsets-17 -> Vector(1, 2), __consumer_offsets-19 -> Vector(1, 2), __consumer_offsets-11 -> Vector(1, 2), __consumer_offsets-13 -> Vector(1, 2), __consumer_offsets-43 -> Vector(1, 2), __consumer_offsets-39 -> Vector(1, 2), data-0 -> Vector(1, 2), __consumer_offsets-45 -> Vector(1, 2), __consumer_offsets-1 -> Vector(1, 2), __consumer_offsets-5 -> Vector(1, 2), __consumer_offsets-29 -> Vector(1, 2)) (kafka.controller.KafkaController)
[2020-06-14 03:43:37,986] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.8709677419354839 (kafka.controller.KafkaController)
[2020-06-14 03:43:37,987] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions __consumer_offsets-21,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,test2-1,__consumer_offsets-47,__consumer_offsets-31,__consumer_offsets-3,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-17,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-43,__consumer_offsets-39,data-0,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-29 triggered by AutoTriggered (kafka.controller.KafkaController)
[2020-06-14 03:43:38,028] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-21 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-21 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,028] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-27 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-27 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,028] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-7 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-7 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,029] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-9 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-9 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,029] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-25 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-25 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,029] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-35 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-35 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,029] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-41 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-41 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,030] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-33 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-33 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,030] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-23 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-23 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,030] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-49 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-49 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,030] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition test2-1 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition test2-1 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,031] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-47 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-47 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,031] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-31 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-31 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,031] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-3 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-3 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,031] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-37 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-37 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,032] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-15 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-15 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,032] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-17 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-17 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,032] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-19 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-19 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,032] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-11 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-11 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,033] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-13 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-13 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,033] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-43 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-43 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,033] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-39 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-39 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,033] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition data-0 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition data-0 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,033] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-45 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-45 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,034] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-1 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-1 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,034] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-5 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-5 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,035] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition __consumer_offsets-29 (kafka.controller.KafkaController)
kafka.common.StateChangeFailedException: Failed to elect leader for partition __consumer_offsets-29 under strategy PreferredReplicaPartitionLeaderElectionStrategy
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$7(PartitionStateMachine.scala:427)
	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:424)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:335)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:236)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:157)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:702)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1071)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:159)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1052)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1080)
	at kafka.controller.KafkaController.process(KafkaController.scala:1818)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:52)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:128)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:131)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at kafka.metrics.KafkaTimer.time(KafkaTimer.scala:31)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:131)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:43:38,036] WARN [Controller id=1] Partition __consumer_offsets-21 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,036] WARN [Controller id=1] Partition __consumer_offsets-27 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,036] WARN [Controller id=1] Partition __consumer_offsets-7 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,036] WARN [Controller id=1] Partition __consumer_offsets-9 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,036] WARN [Controller id=1] Partition __consumer_offsets-25 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,036] WARN [Controller id=1] Partition __consumer_offsets-35 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition __consumer_offsets-41 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition __consumer_offsets-33 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition __consumer_offsets-23 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition __consumer_offsets-49 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition test2-1 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition __consumer_offsets-47 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition __consumer_offsets-31 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition __consumer_offsets-3 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,037] WARN [Controller id=1] Partition __consumer_offsets-37 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-15 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-17 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-19 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-11 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-13 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-43 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-39 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition data-0 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-45 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-1 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,038] WARN [Controller id=1] Partition __consumer_offsets-5 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:43:38,039] WARN [Controller id=1] Partition __consumer_offsets-29 failed to complete preferred replica leader election to 1. Leader is still -1 (kafka.controller.KafkaController)
[2020-06-14 03:45:32,579] INFO [Controller id=1] Shutting down broker 1 (kafka.controller.KafkaController)
[2020-06-14 03:45:32,580] DEBUG [Controller id=1] All shutting down brokers: 1 (kafka.controller.KafkaController)
[2020-06-14 03:45:32,580] DEBUG [Controller id=1] Live brokers:  (kafka.controller.KafkaController)
[2020-06-14 03:45:32,593] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=22,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=30,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=8,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=21,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=4,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=27,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=7,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=9,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=46,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=25,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=35,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=41,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=33,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=23,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=49,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=1,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=47,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=16,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=28,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=31,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=36,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=42,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=3,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=18,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=37,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=15,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=24,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=38,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=17,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=48,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=19,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=11,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=13,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=43,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=6,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=14,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=20,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=44,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=39,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=12,Replica=1],false),StopReplicaRequestInfo([Topic=data,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=45,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=1,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=5,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=26,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=29,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=34,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=10,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=32,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=40,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-06-14 03:45:32,651] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=42,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=40,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=23,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=20,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=9,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=15,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=14,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=1,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=8,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=22,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=30,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=10,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=7,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=29,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=26,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=44,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=18,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=39,Replica=1],false),StopReplicaRequestInfo([Topic=data,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=46,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=27,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=31,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=49,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=4,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=38,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=34,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=11,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=13,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=17,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=2,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=1,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=25,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=43,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=19,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=48,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=35,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=12,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=28,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=6,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=37,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=5,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=24,Replica=1],false),StopReplicaRequestInfo([Topic=test2,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=47,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=16,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=32,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=33,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=3,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=21,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=45,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=41,Replica=1],false),StopReplicaRequestInfo([Topic=__consumer_offsets,Partition=36,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-06-14 03:45:32,652] TRACE [Controller id=1] All leaders = __consumer_offsets-49 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-38 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),test2-2 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:9),__consumer_offsets-16 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-27 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),streams-wordcount-output-0 -> (Leader:1,ISR:1,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-8 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-19 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-13 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-2 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-46 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-35 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-24 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-5 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-43 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-32 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-21 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-10 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-37 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),test2-1 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:9),__consumer_offsets-48 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-40 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-29 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-18 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),streams-plaintext-input-0 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-7 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-34 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-45 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-23 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-26 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-4 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-15 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-42 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-31 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-9 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-20 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),test-0 -> (Leader:1,ISR:1,LeaderEpoch:6,ControllerEpoch:8),streams-wordcount-counts-store-repartition-0 -> (Leader:1,ISR:1,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-1 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-12 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-28 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-17 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-6 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-39 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-44 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),test2-0 -> (Leader:-1,ISR:2,LeaderEpoch:3,ControllerEpoch:9),__consumer_offsets-36 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-47 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-3 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-25 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-14 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-30 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-41 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),streams-wordcount-counts-store-changelog-0 -> (Leader:1,ISR:1,LeaderEpoch:3,ControllerEpoch:8),__consumer_offsets-33 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-22 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),__consumer_offsets-11 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9),__consumer_offsets-0 -> (Leader:-1,ISR:2,LeaderEpoch:5,ControllerEpoch:9),data-0 -> (Leader:-1,ISR:2,LeaderEpoch:4,ControllerEpoch:9) (kafka.controller.KafkaController)
[2020-06-14 03:45:32,683] WARN [RequestSendThread controllerId=1] Controller 1 epoch 9 fails to send request (type: UpdateMetadataRequest=, controllerId=1, controllerEpoch=9, brokerEpoch=623, partitionStates=[UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=49, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=38, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='test2', partitionIndex=2, controllerEpoch=9, leader=-1, leaderEpoch=3, isr=[2], zkVersion=3, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=16, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=27, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=19, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=8, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=2, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=13, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=24, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=35, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=46, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=5, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=43, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=32, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=21, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=10, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=37, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='test2', partitionIndex=1, controllerEpoch=9, leader=-1, leaderEpoch=3, isr=[2], zkVersion=3, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=48, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=40, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=29, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=18, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=7, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=34, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=45, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=23, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=26, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=15, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=4, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=42, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=20, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=31, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=9, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=1, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=12, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=17, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=28, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=6, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=39, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=44, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='test2', partitionIndex=0, controllerEpoch=9, leader=-1, leaderEpoch=3, isr=[2], zkVersion=3, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=36, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=47, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=14, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=3, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=25, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=41, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=30, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=11, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=33, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=22, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1]), UpdateMetadataPartitionState(topicName='data', partitionIndex=0, controllerEpoch=9, leader=-1, leaderEpoch=4, isr=[2], zkVersion=5, replicas=[1, 2], offlineReplicas=[1, 2]), UpdateMetadataPartitionState(topicName='__consumer_offsets', partitionIndex=0, controllerEpoch=9, leader=-1, leaderEpoch=5, isr=[2], zkVersion=6, replicas=[2, 1], offlineReplicas=[2, 1])], liveBrokers=UpdateMetadataBroker(id=1, v0Host='', v0Port=0, endpoints=[UpdateMetadataEndpoint(port=9092, host='10.0.0.7', listener='PLAINTEXT', securityProtocol=0)], rack=null)) to broker 10.0.0.7:9092 (id: 1 rack: null). Reconnecting to broker. (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 1 was disconnected before the response was read
	at org.apache.kafka.clients.NetworkClientUtils.sendAndReceive(NetworkClientUtils.java:100)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:249)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:32,786] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:32,887] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:32,988] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,089] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,190] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,291] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,392] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,493] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,595] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,696] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,797] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,898] WARN [RequestSendThread controllerId=1] Controller 1's connection to broker 10.0.0.7:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 10.0.0.7:9092 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:71)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:288)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:242)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2020-06-14 03:45:33,934] INFO [ControllerEventThread controllerId=1] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:45:33,935] INFO [ControllerEventThread controllerId=1] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:45:33,935] INFO [ControllerEventThread controllerId=1] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:45:33,935] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2020-06-14 03:45:33,936] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2020-06-14 03:45:33,938] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-06-14 03:45:33,940] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-06-14 03:45:33,940] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2020-06-14 03:45:33,940] TRACE [RequestSendThread controllerId=1] shutdownInitiated latch count reached zero. Shutdown called. (kafka.controller.RequestSendThread)
[2020-06-14 03:45:33,940] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2020-06-14 03:45:33,941] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2020-06-14 03:45:33,943] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2020-06-14 03:49:59,036] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-06-14 03:49:59,091] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
